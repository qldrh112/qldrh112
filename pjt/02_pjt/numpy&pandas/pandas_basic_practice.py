import csv
import numpy as np
import pandas as pd

"""
csv 파일을 읽는 방법
1. python의 내장 file open() 함수 사용
2. numpy의 file read 함수 사용
"""

def file_open_by_numpy():
    # np.loadtxt(구분자 = ',', 데이터 타입: string)
    np_arr = np.loadtxt('C:/Users/SSAFY/Desktop/gs/PJT/02-pjt/numpy&pandas/data/test_data.CSV', delimiter=',', encoding='cp949', dtype=str)
    return np_arr

""" 
.csv 파일이니까 구분자가 쉼표여야 하는 것 같고 인코딩 체계는 csv 기본값인 것 같고, 텍스트니까 str이겠거니와
이거 그리고 왜 상대경로로 치면 "FileNotFoundError: data/test_data.CSV not found" 가 뜨는 거여?
"""

arr = file_open_by_numpy()
print(arr)
"""
[['이름' '나이' '성별' '직업' '사는곳']
 ['서팔광' '25' '남' '교수' '경상남도']
 ['황지필' '28' '여' '군인' '경상북도']
 ['김일제' '36' '남' '기자' '서울/경기']
 ['곽마권' '34' '남' '리포터' '강원도']
 이하 생략
 """
print(type(arr))                                # <class 'numpy.ndarray'>


# pandas dataframe 생성
# 기본적인 데이터 프레임 생성
df = pd.DataFrame(arr)
print(df)
"""
      0   1   2        3      4
0    이름  나이  성별       직업    사는곳
1   서팔광  25   남       교수   경상남도
2   황지필  28   여       군인   경상북도
3   김일제  36   남       기자  서울/경기
4   곽마권  34   남      리포터    강원도
이하 생략
"""
print(type(df))                                    # <class 'pandas.core.frame.DataFrame'>

"""리스트 형태가 풀리고 각 행과 열에 엑셀처럼 인덱스가 보이는 것을 볼 수 있다."""


arr1 = [2311, 124, 1354, 43123, 132123]
df = pd.DataFrame(arr1)
print(df)

"""
        0
0    2311
1     124
2    1354
3   43123
4  132123
"""

"""이거 행과 열이 뒤집혀서 나온 거 같은데"""

arr2 = [[2311, 124, 1354, 43123, 132123], [213, 132, 3, 21, 1]]
df = pd.DataFrame(arr2)
print(df)
"""
      0    1     2      3       4
0  2311  124  1354  43123  132123
1   213  132     3     21       1
"""

""" 근데 또 중첩 리스트로 만들면 생각한대로 나오네 """


#컬럼명 지정하면서 생성하기
# 인덱스명도 지정하면서 할 수 있다.
columns = arr[0]                # 항목명을 잡은 것 같은데
arr = np.delete(arr, 0, 0)      # arr의 '이름'을 지운 것인가?
df = pd.DataFrame(arr, columns=columns) # 
print(df)
"""
     이름  나이 성별       직업    사는곳
0   서팔광  25  남       교수   경상남도
1   황지필  28  여       군인   경상북도
2   김일제  36  남       기자  서울/경기
3   곽마권  34  남      리포터    강원도
4   마풍강  45  남       모델    강원도
"""

"""
맨 위에 있는 인덱스를 날린 것이구나
그럼 마지막의 columns = columns의 의미는 뭘까? 
아래에 내용을 공부하는데 columns는 arr의 맨 윗줄 내용의 리스트라는 사실을 알 수 있었다. """


# 처음 N개 행 표시
print(df.head(3)) 
"""
    이름  나이 성별  직업    사는곳
0  서팔광  25  남  교수   경상남도
1  황지필  28  여  군인   경상북도
2  김일제  36  남  기자  서울/경기
"""

""" 위의 항목명은 3에 포함하지 않는 것인가? """

print(df.head(0))
"""
Empty DataFrame
Columns: [이름, 나이, 성별, 직업, 사는곳]
Index: []
"""

"""위의 결과를 보면 포함하지 않는 것 같다. df.head(index)라고 볼 수 있는 것 같다."""

# 마지막 5개 행 표시
print(df.tail(5))
"""
     이름  나이 성별       직업    사는곳
45  큰강산  67  남  빅데이터전문가   충청남도
46  목소리  37  남       모델  서울/경기
47  이튼튼  27  여      건축가   경상북도
48  김개년  36  여      개발자  서울/경기
49  풀스택  43  남      개발자  서울/경기
"""

# 헤더 이름 지정하기
headers = ['민근', '오진', '성민', '승우', '진우']
df.columns = headers
print(df.head(2))
"""
    민근  오진 성민  승우    진우
0  서팔광  25  남  교수  경상남도
1  황지필  28  여  군인  경상북도
"""

headers = ['이름', '나이', '성별', '직업', '사는곳']
df.columns = headers
print(df.head(2))


# 데이터 타입 반환
print(df.dtypes)                # dtype: object

# DataFrame 의 정보 출력
print(df.info())
"""
memory usage: 2.1+ KB
None
"""

# 컬럼 별 요약 통계량 출력
print(df.describe())
"""
         이름  나이  성별   직업    사는곳
count    50  50  50   50     50
unique   50  33   2   28      9
top     서팔광  34   남  개발자  서울/경기
freq      1   5  26   10     11

unique: 열에 있는 고유한 개체의 수
top: 가장 많이 사용된 데이터
freq: 가장 많이 사용된 값의 빈도 수
NaN: 숫자가 아님을 나타냄 - 통계적 계산 불가
"""

""" top이 동점이면 가장 순서가 작은 것을 가져오는구나"""

# 특정 행 조회하기
print(df.iloc[2])           # row번호로 조회가능
print(df.loc[2])            # index명으로 조회가능
"""
이름       김일제
나이        36
성별         남
직업        기자
사는곳    서울/경기
"""
""" 조회했을 때, 리스트가 하나면 요소를 세로로 뿌려주고, 리스트가 여러 개면 각 요소를 가로로 뿌려주는구나"""

# 여러 행 조회
print(df.loc[[2, 10]])
"""
    이름  나이 성별   직업    사는곳
2  김일제  36  남   기자  서울/경기
10  마석대  23  여  학원강사   경상북도
"""

# 특정 구간 조회
print(df.loc[1:4])
"""
    이름  나이 성별   직업    사는곳
1  황지필  28  여   군인   경상북도
2  김일제  36  남   기자  서울/경기
3  곽마권  34  남  리포터    강원도
4  마풍강  45  남   모델    강원도
"""

# 특정 행을 제외하고 조회
print(df.loc[df.index != 3])
"""
     이름  나이 성별       직업    사는곳
0   서팔광  25  남       교수   경상남도
1   황지필  28  여       군인   경상북도
2   김일제  36  남       기자  서울/경기
4   마풍강  45  남       모델    강원도
이하 생략
"""


# 특정 행을 다른 방법으로 가져오기
print(df.head(5).loc[[True, True, False, False, True]])     # 인덱스 개수와 동일한 T/F 배열을 사용해야 에러가 발생하지 않는다.

# 특정 열 조회
print(df.loc[:, '이름'])
"""
0     서팔광
1     황지필
2     김일제
3     곽마권
4     마풍강
5     김덕협
"""

# 특정 열 제외하고 조회
print(df.loc[:, df.columns != '직업'])
"""
     이름  나이 성별    사는곳
0   서팔광  25  남   경상남도
1   황지필  28  여   경상북도
2   김일제  36  남  서울/경기
3   곽마권  34  남    강원도"""

""" .loc()의 선택 인자로 column 값이 있는 듯 하다."""

# 특정 범위의 열 가져오기
print(df.loc[:, '이름':'성별'])
"""
     이름  나이 성별
0   서팔광  25  남
1   황지필  28  여
2   김일제  36  남
3   곽마권  34  남
"""

# 특정 열 다른 방법으로 가져오기
print(df.loc[:, [True, True, False, False, True]])          # 열의 길이와 동일한 길이의 T/F 배열을 사용해야 오류가 나지 않는다.
"""
     이름  나이    사는곳
0   서팔광  25   경상남도
1   황지필  28   경상북도
2   김일제  36  서울/경기
3   곽마권  34    강원도
"""

# 행와 열 조회하기
print(df.loc[2, '성별'])                                # 남
print(df.loc[[2, 3], ['이름', '사는곳']])
"""
    이름    사는곳
2  김일제  서울/경기
3  곽마권    강원도
"""

# 마지막 위치에 하나의 행 추가
# 리스트를 추가하는 것이라고 생각하면 될 듯 하다.
# 인덱스명도 지정하면서 dataframe을 생성할 수 있다. 
arr = file_open_by_numpy()
columns = arr[0]
arr = np.delete(arr, 0, 0)
df  = pd.DataFrame(arr, columns=columns)

df.loc[len(df)] = ['마지막', '99', '남', '무직', '서울/경기']
print(df.tail(5))

"""
     이름  나이 성별   직업    사는곳
46  목소리  37  남   모델  서울/경기
47  이튼튼  27  여  건축가   경상북도
48  김개년  36  여  개발자  서울/경기
49  풀스택  43  남  개발자  서울/경기
50  마지막  99  남   무직  서울/경기
"""

# 마지막 위치에 여러 행 추가
df2 = pd.DataFrame({
    '이름' : ['양우성', 'kendrick lamar'],
    '나이' : ['25', '34'],
    '성별' : ['남', '남'],
    '직업' : ['유도선수', '모델'],
    '사는곳' : ['경기도', '미국'],
})
print(df2)

"""
               이름  나이 성별    직업  사는곳
0             양우성  25  남  유도선수  경기도
1  kendrick lamar  34  남    모델   미국
"""
""" 각 요소의 길이가 다르면 ValueError: All arrays must be of the same length라는 에러가 뜨니 주의해야 한다."""

# 딕셔너리 형태를 dataframe에 추가하고 싶을 때 사용한다.
# ignore_index=True 를 인자로 넣어줘야 뒤에 잘 들어간다.
# df = pd.append(df2, ignore_index=True)
# print(df.tail(5))

"""왜 오류가 날까? append는 이미 없어진 것 같고 무조건 concat으로 2개의 dataframe을 병합하는 게 맞는 것 같다."""

# 두 개의 dataframe 합치기
new_df = pd.concat([df, df2], ignore_index=True)
print(new_df.tail(5))
"""
                이름  나이 성별    직업    사는곳
48             김개년  36  여   개발자  서울/경기
49             풀스택  43  남   개발자  서울/경기
50             마지막  99  남    무직  서울/경기
51             양우성  25  남  유도선수    경기도
52  kendrick lamar  34  남    모델     미국
"""
""" 이건 또 잘 먹네?"""

# 중간에 데이터 삽입
# pd.concat() & iloc 사용
# pd.concat([df.iloc[:N]], 원하는 행, df.iloc[N:], ignore_index=True]
# N번째에 새로운 dataframe을 넣고 싶을 때

new_df = pd.concat([df.iloc[:3], df2, df.iloc[3:]], ignore_index=True)
print(new_df.head(10))
"""
이름  나이 성별    직업    사는곳
0             서팔광  25  남    교수   경상남도
1             황지필  28  여    군인   경상북도
2             김일제  36  남    기자  서울/경기
3             양우성  25  남  유도선수    경기도
4  kendrick lamar  34  남    모델     미국
5             곽마권  34  남   리포터    강원도
6             마풍강  45  남    모델    강원도
"""
""" 3번째에 양우성이가 들어갔네 근데 원리가 어떻게 되는 거지?
2행까지 + 넣고 싶은 dataframe + 3행부터 나눠서 재조립하는 거네
"""

# 마지막 위치에 하나의 열 추가
# df[열이름] = 원소리스트
df['연봉(만원)'] = [1000] * len(df)
print(df.head(4))
"""
    이름  나이 성별   직업    사는곳  연봉(만원)
0  서팔광  25  남   교수   경상남도    1000
1  황지필  28  여   군인   경상북도    1000
2  김일제  36  남   기자  서울/경기    1000
3  곽마권  34  남  리포터    강원도    1000
"""

"""데이터 넣을 때 무조건 대괄호로 묶어줘야 하는구나 len() 디테일은 장난 아니구만"""

# 중간 위치에 열 추가
df.insert(2, '국적', ['한국'] * len(df))
print(df.head(1))
"""
이름  나이  국적 성별  직업   사는곳  연봉(만원)
0  서팔광  25  한국  남  교수  경상남도    1000
"""

"""
행삭제
1. dropna()를 이용한 결측 데이터 제거
2. drop.duplicates를 이용한 중복 제거
3. index명, index 순서를 이용한 행삭제
4. 조건에 따른 행삭제
"""

# 중복된 행 제거
# 중복된 데이터를 강제로 추가
df.loc[len(df)] = ['마지막', '99', '미국', '남', '무직', '서울/경기', '0']
df.loc[len(df)] = ['마지막', '99', '미국', '남', '무직', '서울/경기', '0']
df.loc[len(df)] = ['마지막', '99', '미국', '남', '무직', '서울/경기', '0']
df.loc[len(df)] = ['마지막', '99', '미국', '남', '무직', '서울/경기', '0']
print(df.tail(5))
"""
     이름  나이  국적 성별  직업    사는곳 연봉(만원)
50  마지막  99  한국  남  무직  서울/경기   1000
51  마지막  99  미국  남  무직  서울/경기      0
52  마지막  99  미국  남  무직  서울/경기      0
53  마지막  99  미국  남  무직  서울/경기      0
54  마지막  99  미국  남  무직  서울/경기      0
"""

# 중복 데이터 조회
print(df.duplicated())
"""
0     False
1     False
2     False
3     False
"""              
print(df.duplicated().sum())            # 3
"""
그냥 duplicated()만 하면 인덱스랑 bool만 나오고 sum()을 하면 True만 싹 다 더하는 듯 하다.
중복된 모든 데이터의 수가 아니라 전체 데이터에서 중복된 것만을 뽑아내는 듯 하다.
"""

df.drop_duplicates(inplace=True)
print(df.tail(3))
"""
     이름  나이  국적 성별   직업    사는곳 연봉(만원)
49  풀스택  43  한국  남  개발자  서울/경기   1000
50  마지막  99  한국  남   무직  서울/경기   1000
51  마지막  99  미국  남   무직  서울/경기      0
"""


# 인덱스명 or 인덱스 순서를 이용한 행 삭제
# index 명으로 삭제
df.drop([1, 2], inplace=True)                           # 인덱스 이름이 1과 2인 것을 날려라
print(df.head(4))
"""
    이름  나이  국적 성별   직업    사는곳 연봉(만원)
0  서팔광  25  한국  남   교수   경상남도   1000
3  곽마권  34  한국  남  리포터    강원도   1000
4  마풍강  45  한국  남   모델    강원도   1000
5  김덕협  67  한국  여  개발자  서울/경기   1000
"""

""" 이거 인자로 리스트를 넣어야 하는지 그냥 상수만 넣어야 하는지 헛갈리기 시작한다.
그냥 단수면, 숫자, 복수면 리스트인가? """

# 인덱스 순서로 삭제
df.drop([df.index[0], df.index[1]], inplace=True)       # 인덱스 첫 번째, 두 번째 날려라
print(df.head(5))
"""
    이름  나이  국적 성별    직업    사는곳 연봉(만원)
4  마풍강  45  한국  남    모델    강원도   1000
5  김덕협  67  한국  여   개발자  서울/경기   1000
6  나대물  32  한국  여   카텐더   충청북도   1000
7  유덕창  24  한국  남  학원강사   전라북도   1000
8  황충유  34  한국  여   개발자    강원도   1000
"""

# 열 조건에 따라 행 삭제
idxs = df[df['나이'] > '50'].index      # 나이 50 이상 먹은 양반들의 인덱스를 따오는 것 같군
df.drop(idxs, inplace=True)
print(df)
"""
     이름  나이  국적 성별       직업    사는곳 연봉(만원)
4   마풍강  45  한국  남       모델    강원도   1000
6   나대물  32  한국  여      카텐더   충청북도   1000
7   유덕창  24  한국  남     학원강사   전라북도   1000
8   황충유  34  한국  여      개발자    강원도   1000
10  마석대  23  한국  여     학원강사   경상북도   1000
"""

# 열 삭제
# 필요한 열만 loc()로 가져온다. 필요하지 않은 것은 리스트에 남기지 말란 얘기임
df = df.loc[:, ['이름', '나이', '성별', '직업', '사는곳']]
print(df)
"""
     이름  나이 성별       직업    사는곳
4   마풍강  45  남       모델    강원도
6   나대물  32  여      카텐더   충청북도
7   유덕창  24  남     학원강사   전라북도
8   황충유  34  여      개발자    강원도
"""

# 데이터 프레임 복사
# 대입 연산자 사용시 얕은 복사가 발생한다.
# 원본 데이터 변경을 원치 않을 시 copy() 함수를 통해 깊은 복사를 해야 한다.
arr = file_open_by_numpy()
columns = arr[0]
arr = np.delete(arr, 0, 0) # 이거 0번 요소를 2번 날리는 것 같은데요
df = pd.DataFrame(arr, columns=columns)

df2 = df
df2['나이'] = 10
print(df.head())
"""
    이름  나이 성별   직업    사는곳
0  서팔광  10  남   교수   경상남도
1  황지필  10  여   군인   경상북도
2  김일제  10  남   기자  서울/경기
3  곽마권  10  남  리포터    강원도
4  마풍강  10  남   모델    강원도
"""


df2 = df.copy()
df2['나이'] = 10
print(df.head())
"""
    이름  나이 성별   직업    사는곳
0  서팔광  25  남   교수   경상남도
1  황지필  28  여   군인   경상북도
2  김일제  36  남   기자  서울/경기
3  곽마권  34  남  리포터    강원도
4  마풍강  45  남   모델    강원도
"""

""" 이거 왜 head() 기본 값이 5임?"""

